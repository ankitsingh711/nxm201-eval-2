1. Create an index on the user_id field in the purchases collection to improve the performance of your queries.

Solution: db.users.createIndex({"user_id": 1});

2. Use the $lookup operator in an aggregation pipeline to join the users and purchases collections, and return a new documents that contains the name and age of each user, along with their purchases. The output should look like this:

Solutions: db.users.aggregate([
    {$lookup: {from:"purchase", localField: "_id", foreignField:"user_id",as:"user_purchase"}}
])

3. Use the $group operator in an aggregation pipeline to calculate the total number of purchases and total spending for each user. The output should look like this:

Solution : db.purchases.aggregate([{$group: {_id:"$user_id", totalPurchase:{$sum: 1}, totalSpending:{$sum,"$amount"}}}]);

4. Use the $sort operator to sort the output documents by total spending in descending order. The output should look like this:

Soultion: db.purchase.aggregate([
    {$lookup: {
        from: "users",
        localField: "user_id",
        foreignFiled: "_id",
        as: "user"
    }},
    {
        $group: {
            _id: "$user_id",
            name:{$first:"$user.name"},
            totalSpending: {$sum: "$price"},
            totalPurchase: {$sum:1}
        }
    },
    {
        $sort: {totalSpending: -1}
    },
    {
        $project: {
            _id: "$_id",
            name:1,
            totalSpending: 1,
            totalPurchase: 1
        }
    }
])

5. Cross check the total_purchases and total_spending, if it is correct, by adding more purchases in the purchases collection and running your aggregation pipeline again.

Solution : db.users.aggregate([
   {
      $lookup:
         {
           from: "purchase",
           localField: "_id",
           foreignField: "user_id",
           as: "purchase"
         }
   },
   {
      $group:
      {
         _id: "$_id",
         name: { $first: "$name" },
         total_purchase: { $sum: { $size: "$purchase" } },
         total_spending: { $sum: { $sum: "$purchase.price" } }
      }
   },
   {
      $sort: { total_spending: -1 }
   }
])





